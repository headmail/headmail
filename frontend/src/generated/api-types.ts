/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/campaigns": {
    /** List all campaigns */
    get: {
      parameters: {
        query: {
          /** Page number */
          page?: number;
          /** Number of items per page */
          limit?: number;
          /** Search term */
          search?: string;
          /** Tags to filter by */
          "tags[]"?: string[];
          /** Status to filter by */
          "status[]"?: string[];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.PaginatedListResponse-domain_Campaign"];
        };
      };
    };
    /** Create a new campaign */
    post: {
      parameters: {
        body: {
          /** Campaign to create */
          campaign: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateCampaignRequest"];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions["domain.Campaign"];
        };
      };
    };
  };
  "/campaigns/{campaignID}": {
    /** Get a campaign by ID */
    get: {
      parameters: {
        path: {
          /** Campaign ID */
          campaignID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Campaign"];
        };
      };
    };
    /** Update a campaign */
    put: {
      parameters: {
        path: {
          /** Campaign ID */
          campaignID: string;
        };
        body: {
          /** Campaign to update */
          campaign: definitions["github_com_headmail_headmail_pkg_api_admin_dto.UpdateCampaignRequest"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Campaign"];
        };
      };
    };
    /** Delete a campaign */
    delete: {
      parameters: {
        path: {
          /** Campaign ID */
          campaignID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.DeleteResponse"];
        };
      };
    };
  };
  "/campaigns/{campaignID}/deliveries": {
    /** List deliveries for a campaign */
    get: {
      parameters: {
        path: {
          /** Campaign ID */
          campaignID: string;
        };
        query: {
          /** Page number */
          page?: number;
          /** Number of items per page */
          limit?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.PaginatedListResponse-domain_Delivery"];
        };
      };
    };
    /** Create deliveries for a campaign */
    post: {
      parameters: {
        path: {
          /** Campaign ID */
          campaignID: string;
        };
        body: {
          /** Deliveries to create */
          request: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesRequest"];
        };
      };
      responses: {
        /** Accepted */
        202: {
          schema: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesResponse"];
        };
      };
    };
  };
  "/campaigns/{campaignID}/deliveries/{deliveryID}": {
    /** Get a delivery by ID */
    get: {
      parameters: {
        path: {
          /** Delivery ID */
          deliveryID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Delivery"];
        };
      };
    };
  };
  "/campaigns/{campaignID}/status": {
    /** Update campaign status */
    patch: {
      parameters: {
        path: {
          /** Campaign ID */
          campaignID: string;
        };
        body: {
          /** Status update */
          statusUpdate: definitions["api_admin.UpdateCampaignStatusRequest"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/lists": {
    /** List all mailing lists */
    get: {
      parameters: {
        query: {
          /** Page number */
          page?: number;
          /** Number of items per page */
          limit?: number;
          /** Search term */
          search?: string;
          /** Tags to filter by */
          "tags[]"?: string[];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.PaginatedListResponse-domain_List"];
        };
      };
    };
    /** Create a new mailing list */
    post: {
      parameters: {
        body: {
          /** List to create */
          list: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateListRequest"];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions["domain.List"];
        };
      };
    };
  };
  "/lists/{listID}": {
    /** Get a mailing list by ID */
    get: {
      parameters: {
        path: {
          /** List ID */
          listID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.List"];
        };
      };
    };
    /** Update a mailing list */
    put: {
      parameters: {
        path: {
          /** List ID */
          listID: string;
        };
        body: {
          /** List to update */
          list: definitions["github_com_headmail_headmail_pkg_api_admin_dto.UpdateListRequest"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.List"];
        };
      };
    };
    /** Delete a mailing list */
    delete: {
      parameters: {
        path: {
          /** List ID */
          listID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.DeleteResponse"];
        };
      };
    };
  };
  "/lists/{listID}/subscribers": {
    /** List subscribers */
    get: {
      parameters: {
        query: {
          /** Page number */
          page?: number;
          /** Number of items per page */
          limit?: number;
          /** Filter by status */
          status?: string;
          /** Search term */
          search?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.PaginatedListResponse-domain_Subscriber"];
        };
      };
    };
    /** Add subscribers to a list */
    post: {
      parameters: {
        path: {
          /** List ID */
          listID: string;
        };
        body: {
          /** Subscribers to add */
          request: definitions["api_admin.CreateSubscribersRequest"];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions["api_admin.EmptyResponse"];
        };
      };
    };
  };
  "/subscribers": {
    /** List subscribers */
    get: {
      parameters: {
        query: {
          /** Page number */
          page?: number;
          /** Number of items per page */
          limit?: number;
          /** Filter by status */
          status?: string;
          /** Search term */
          search?: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.PaginatedListResponse-domain_Subscriber"];
        };
      };
    };
  };
  "/subscribers/{subscriberID}": {
    /** Get a subscriber by ID */
    get: {
      parameters: {
        path: {
          /** Subscriber ID */
          subscriberID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Subscriber"];
        };
      };
    };
    /** Update a subscriber */
    put: {
      parameters: {
        path: {
          /** Subscriber ID */
          subscriberID: string;
        };
        body: {
          /** Subscriber to update */
          subscriber: definitions["github_com_headmail_headmail_pkg_api_admin_dto.UpdateSubscriberRequest"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Subscriber"];
        };
      };
    };
    /** Delete a subscriber */
    delete: {
      parameters: {
        path: {
          /** Subscriber ID */
          subscriberID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.DeleteResponse"];
        };
      };
    };
  };
  "/templates": {
    /** List all templates */
    get: {
      parameters: {
        query: {
          /** Page number */
          page?: number;
          /** Number of items per page */
          limit?: number;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.PaginatedListResponse-domain_Template"];
        };
      };
    };
    /** Create a new template */
    post: {
      parameters: {
        body: {
          /** Template to create */
          template: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateTemplateRequest"];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions["domain.Template"];
        };
      };
    };
  };
  "/templates/{templateID}": {
    /** Get a template by ID */
    get: {
      parameters: {
        path: {
          /** Template ID */
          templateID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Template"];
        };
      };
    };
    /** Update a template */
    put: {
      parameters: {
        path: {
          /** Template ID */
          templateID: string;
        };
        body: {
          /** Template to update */
          template: definitions["github_com_headmail_headmail_pkg_api_admin_dto.UpdateTemplateRequest"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Template"];
        };
      };
    };
    /** Delete a template */
    delete: {
      parameters: {
        path: {
          /** Template ID */
          templateID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["api_admin.DeleteResponse"];
        };
      };
    };
  };
  "/tx": {
    /** Create a new transactional delivery */
    post: {
      parameters: {
        body: {
          /** Transactional delivery to create */
          delivery: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateTransactionalDeliveryRequest"];
        };
      };
      responses: {
        /** Created */
        201: {
          schema: definitions["domain.Delivery"];
        };
      };
    };
  };
  "/tx/{deliveryID}": {
    /** Get a delivery by ID */
    get: {
      parameters: {
        path: {
          /** Delivery ID */
          deliveryID: string;
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["domain.Delivery"];
        };
      };
    };
  };
}

export interface definitions {
  "api_admin.CreateSubscribersRequest": {
    append?: boolean;
    subscribers?: definitions["github_com_headmail_headmail_pkg_api_admin_dto.CreateSubscriberRequest"][];
  };
  "api_admin.DeleteResponse": {
    deleted?: boolean;
    message?: string;
  };
  "api_admin.EmptyResponse": { [key: string]: unknown };
  "api_admin.PaginatedListResponse-domain_Campaign": {
    data?: definitions["domain.Campaign"][];
    pagination?: definitions["api_admin.PaginationResponse"];
  };
  "api_admin.PaginatedListResponse-domain_Delivery": {
    data?: definitions["domain.Delivery"][];
    pagination?: definitions["api_admin.PaginationResponse"];
  };
  "api_admin.PaginatedListResponse-domain_List": {
    data?: definitions["domain.List"][];
    pagination?: definitions["api_admin.PaginationResponse"];
  };
  "api_admin.PaginatedListResponse-domain_Subscriber": {
    data?: definitions["domain.Subscriber"][];
    pagination?: definitions["api_admin.PaginationResponse"];
  };
  "api_admin.PaginatedListResponse-domain_Template": {
    data?: definitions["domain.Template"][];
    pagination?: definitions["api_admin.PaginationResponse"];
  };
  "api_admin.PaginationResponse": {
    limit?: number;
    page?: number;
    total?: number;
  };
  "api_admin.UpdateCampaignStatusRequest": {
    status?: definitions["domain.CampaignStatus"];
  };
  "domain.Campaign": {
    bounce_count?: number;
    click_count?: number;
    /** @description Unix timestamp */
    created_at?: number;
    /** @description JSON data for templates */
    data?: { [key: string]: unknown };
    /** @description For soft deletes */
    deleted_at?: number;
    delivered_count?: number;
    failed_count?: number;
    /** @description Sender's email */
    from_email?: string;
    /** @description Sender's name */
    from_name?: string;
    /** @description Additional email headers */
    headers?: { [key: string]: string };
    /** @description UUID */
    id?: string;
    /** @description Name of the campaign */
    name?: string;
    open_count?: number;
    /** @description Calculated statistics */
    recipient_count?: number;
    /** @description Scheduled time for sending */
    scheduled_at?: number;
    /** @description Time when sending was completed */
    sent_at?: number;
    /** @description Status of the campaign */
    status?: definitions["domain.CampaignStatus"];
    /** @description Subject template */
    subject?: string;
    /** @description Tags for categorization */
    tags?: string[];
    /** @description HTML template */
    template_html?: string;
    /** @description Optional template ID */
    template_id?: string;
    /** @description Plain text template */
    template_text?: string;
    /** @description Unix timestamp */
    updated_at?: number;
    /** @description UTM parameters for link tracking */
    utm_params?: { [key: string]: string };
  };
  /** @enum {string} */
  "domain.CampaignStatus":
    | "draft"
    | "scheduled"
    | "sending"
    | "sent"
    | "paused"
    | "cancelled";
  "domain.Delivery": {
    /** @description HTML body */
    body_html?: string;
    /** @description Text body */
    body_text?: string;
    /** @description Number of bounces */
    bounce_count?: number;
    /** @description Campaign ID (nullable for transactional) */
    campaign_id?: string;
    /** @description Number of clicks */
    click_count?: number;
    /** @description Timestamps */
    created_at?: number;
    /** @description Individual data for templates */
    data?: { [key: string]: unknown };
    /** @description Recipient's email */
    email?: string;
    /** @description Time of failure */
    failed_at?: number;
    /** @description Reason for failure */
    failure_reason?: string;
    /** @description Individual headers */
    headers?: { [key: string]: string };
    /** @description UUID */
    id?: string;
    /** @description SMTP Message ID */
    message_id?: string;
    /** @description Recipient's name */
    name?: string;
    /** @description Statistics */
    open_count?: number;
    /** @description First open time */
    opened_at?: number;
    /** @description Scheduled time */
    scheduled_at?: number;
    /** @description Time of sending */
    sent_at?: number;
    /** @description scheduled, sending, sent, delivered, failed, bounced */
    status?: definitions["domain.DeliveryStatus"];
    /** @description Actual sent subject */
    subject?: string;
    /** @description Tags for categorization */
    tags?: string[];
    /** @description campaign, transactional */
    type?: definitions["domain.DeliveryType"];
  };
  /** @enum {string} */
  "domain.DeliveryStatus":
    | "scheduled"
    | "sending"
    | "sent"
    | "delivered"
    | "failed"
    | "bounced";
  /** @enum {string} */
  "domain.DeliveryType": "campaign" | "transaction";
  "domain.List": {
    /** @description Unix timestamp in seconds */
    created_at?: number;
    /** @description For soft deletes */
    deleted_at?: number;
    /** @description Description of the list */
    description?: string;
    /** @description UUID */
    id?: string;
    /** @description Name of the list */
    name?: string;
    /** @description Calculated field for subscriber count */
    subscriber_count?: number;
    /** @description Tags for categorization */
    tags?: string[];
    /** @description Unix timestamp in seconds */
    updated_at?: number;
  };
  "domain.Subscriber": {
    /** @description Unix timestamp in seconds */
    created_at?: number;
    /** @description Unique email address */
    email?: string;
    /** @description UUID */
    id?: string;
    lists?: definitions["domain.SubscriberList"][];
    /** @description Name of the subscriber */
    name?: string;
    status?: definitions["domain.SubscriberStatus"];
    /** @description Unix timestamp in seconds */
    updated_at?: number;
  };
  "domain.SubscriberList": {
    /** @description Unix timestamp in seconds */
    created_at?: number;
    /** @description Foreign key to the List */
    list_id?: string;
    status?: definitions["domain.SubscriberListStatus"];
    /** @description Unix timestamp of subscription */
    subscribed_at?: number;
    /** @description Unix timestamp of unsubscription */
    unsubscribed_at?: number;
    /** @description Unix timestamp in seconds */
    updated_at?: number;
  };
  /** @enum {string} */
  "domain.SubscriberListStatus":
    | "confirmed"
    | "unsubscribed"
    | "bounced"
    | "complained";
  /** @enum {string} */
  "domain.SubscriberStatus": "enabled" | "disabled";
  "domain.Template": {
    /** @description HTML content of the template */
    body_html?: string;
    /** @description Text content of the template */
    body_text?: string;
    /** @description Unix timestamp seconds */
    created_at?: number;
    /** @description UUID */
    id?: string;
    /** @description Template name */
    name?: string;
    /** @description Unix timestamp seconds */
    updated_at?: number;
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateCampaignRequest": {
    data?: { [key: string]: unknown };
    from_email?: string;
    from_name?: string;
    headers?: { [key: string]: string };
    name?: string;
    scheduled_at?: number;
    status?: definitions["domain.CampaignStatus"];
    subject?: string;
    tags?: string[];
    template_html?: string;
    template_text?: string;
    utm_params?: { [key: string]: string };
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesRequest": {
    individuals?: definitions["github_com_headmail_headmail_pkg_api_admin_dto.Individual"][];
    lists?: string[];
    scheduled_at?: number;
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesResponse": {
    deliveries_created?: number;
    scheduled_at?: number;
    status?: definitions["domain.CampaignStatus"];
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateListRequest": {
    description?: string;
    name?: string;
    tags?: string[];
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateSubscriberRequest": {
    email?: string;
    name?: string;
    status?: definitions["domain.SubscriberStatus"];
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateTemplateRequest": {
    body_html?: string;
    body_text?: string;
    name?: string;
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.CreateTransactionalDeliveryRequest": {
    data?: { [key: string]: unknown };
    email?: string;
    headers?: { [key: string]: string };
    name?: string;
    subject?: string;
    tags?: string[];
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.Individual": {
    data?: { [key: string]: unknown };
    email?: string;
    headers?: { [key: string]: string };
    name?: string;
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.UpdateCampaignRequest": {
    data?: { [key: string]: unknown };
    from_email?: string;
    from_name?: string;
    headers?: { [key: string]: string };
    name?: string;
    scheduled_at?: number;
    status?: definitions["domain.CampaignStatus"];
    subject?: string;
    tags?: string[];
    template_html?: string;
    template_text?: string;
    utm_params?: { [key: string]: string };
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.UpdateListRequest": {
    description?: string;
    name?: string;
    tags?: string[];
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.UpdateSubscriberRequest": {
    email?: string;
    name?: string;
    status?: definitions["domain.SubscriberStatus"];
  };
  "github_com_headmail_headmail_pkg_api_admin_dto.UpdateTemplateRequest": {
    body_html?: string;
    body_text?: string;
    name?: string;
  };
}

export interface operations {}

export interface external {}
