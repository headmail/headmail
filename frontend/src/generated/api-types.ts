/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all campaigns
         * @description List all campaigns
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Search term */
                    search?: string;
                    /** @description Tags to filter by */
                    "tags[]"?: string[];
                    /** @description Status to filter by */
                    "status[]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.PaginatedListResponse-domain_Campaign"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new campaign
         * @description Create a new campaign
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Campaign to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateCampaignRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Campaign"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaignID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a campaign by ID
         * @description Get a campaign by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Campaign"];
                    };
                };
            };
        };
        /**
         * Update a campaign
         * @description Update a campaign
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            /** @description Campaign to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.UpdateCampaignRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Campaign"];
                    };
                };
            };
        };
        /**
         * Create or upsert a campaign with given ID
         * @description Create a campaign specifying the ID in the path. Use ?upsert=true to update an existing campaign with the same ID.
         */
        post: {
            parameters: {
                query?: {
                    /** @description Upsert if exists */
                    upsert?: boolean;
                };
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            /** @description Campaign to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateCampaignRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Campaign"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Conflict - ID already exists */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
        /**
         * Delete a campaign
         * @description Delete a campaign
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.DeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaignID}/deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List deliveries for a campaign
         * @description List deliveries for a campaign
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.PaginatedListResponse-domain_Delivery"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create deliveries for a campaign
         * @description Create deliveries for a campaign
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            /** @description Deliveries to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesRequest"];
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaignID}/deliveries/{deliveryID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a delivery by ID
         * @description Get a delivery by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    deliveryID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Delivery"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaignID}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get campaign statistics (single)
         * @description Returns time-bucketed opens and clicks for the specified campaign ID.
         */
        get: {
            parameters: {
                query?: {
                    /** @description From unix timestamp */
                    from?: number;
                    /** @description To unix timestamp */
                    to?: number;
                    /** @description hour|day */
                    granularity?: string;
                };
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CampaignStatsResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Internal error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{campaignID}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update campaign status
         * @description Update campaign status
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Campaign ID */
                    campaignID: string;
                };
                cookie?: never;
            };
            /** @description Status update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api_admin.UpdateCampaignStatusRequest"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Returns basic health information (status, time, uptime)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all mailing lists
         * @description List all mailing lists
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Search term */
                    search?: string;
                    /** @description Tags to filter by */
                    "tags[]"?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.PaginatedListResponse-domain_List"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new mailing list
         * @description Create a new mailing list
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description List to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateListRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.List"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{listID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a mailing list by ID
         * @description Get a mailing list by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.List"];
                    };
                };
            };
        };
        /**
         * Update a mailing list
         * @description Update a mailing list
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            /** @description List to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.UpdateListRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.List"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a mailing list
         * @description Delete a mailing list
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.DeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lists/{listID}/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscribers in a list
         * @description List subscribers in a list
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by status */
                    status?: string;
                    /** @description Search term */
                    search?: string;
                };
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.PaginatedListResponse-domain_Subscriber"];
                    };
                };
            };
        };
        /**
         * Replace subscribers in a list
         * @description Replace list members atomically
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            /** @description Replace request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.ReplaceSubscribersRequest"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Add subscribers to a list
         * @description Add subscribers to a list
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            /** @description Subscribers to add */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["api_admin.CreateSubscribersRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.EmptyResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Patch subscribers in a list (add/remove)
         * @description Add or remove subscribers to/from a list
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            /** @description Patch request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.PatchSubscribersRequest"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Metrics
         * @description Exposes Prometheus metrics
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Prometheus metrics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/r/{deliveryID}/c": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track click and redirect
         * @description Records a click event and redirects to the original URL.
         */
        get: {
            parameters: {
                query: {
                    /** @description URL encoded target */
                    u: string;
                };
                header?: never;
                path: {
                    /** @description Delivery ID */
                    deliveryID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect */
                302: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/r/{deliveryID}/o": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Track open (1x1 pixel)
         * @description Records an open event for a delivery and returns a 1x1 transparent PNG (or configured image).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    deliveryID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": Record<string, never>;
                        "image/png": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscribers
         * @description List subscribers
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                    /** @description Filter by status */
                    status?: string;
                    /** @description Search term */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.PaginatedListResponse-domain_Subscriber"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscribers/{subscriberID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a subscriber by ID
         * @description Get a subscriber by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscriber ID */
                    subscriberID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Subscriber"];
                    };
                };
            };
        };
        /**
         * Update a subscriber
         * @description Update a subscriber
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscriber ID */
                    subscriberID: string;
                };
                cookie?: never;
            };
            /** @description Subscriber to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.UpdateSubscriberRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Subscriber"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a subscriber
         * @description Delete a subscriber
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Subscriber ID */
                    subscriberID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.DeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all templates
         * @description List all templates
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number */
                    page?: number;
                    /** @description Number of items per page */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.PaginatedListResponse-domain_Template"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new template
         * @description Create a new template
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Template to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateTemplateRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Template"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/{templateID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a template by ID
         * @description Get a template by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Template ID */
                    templateID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Template"];
                    };
                };
            };
        };
        /**
         * Update a template
         * @description Update a template
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Template ID */
                    templateID: string;
                };
                cookie?: never;
            };
            /** @description Template to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.UpdateTemplateRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Template"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a template
         * @description Delete a template
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Template ID */
                    templateID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api_admin.DeleteResponse"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Render template preview
         * @description Renders provided template HTML/text/subject with sample data (name, email) and returns rendered output.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Preview request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.PreviewTemplateRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.PreviewTemplateResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new transactional delivery
         * @description Create a new transactional delivery
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Transactional delivery to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateTransactionalDeliveryRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Delivery"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tx/{deliveryID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a delivery by ID
         * @description Get a delivery by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    deliveryID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["domain.Delivery"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "api_admin.CreateSubscribersRequest": {
            append?: boolean;
            subscribers?: components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateSubscriberRequest"][];
        };
        "api_admin.DeleteResponse": {
            deleted?: boolean;
            message?: string;
        };
        "api_admin.EmptyResponse": Record<string, never>;
        "api_admin.PaginatedListResponse-domain_Campaign": {
            data?: components["schemas"]["domain.Campaign"][];
            pagination?: components["schemas"]["api_admin.PaginationResponse"];
        };
        "api_admin.PaginatedListResponse-domain_Delivery": {
            data?: components["schemas"]["domain.Delivery"][];
            pagination?: components["schemas"]["api_admin.PaginationResponse"];
        };
        "api_admin.PaginatedListResponse-domain_List": {
            data?: components["schemas"]["domain.List"][];
            pagination?: components["schemas"]["api_admin.PaginationResponse"];
        };
        "api_admin.PaginatedListResponse-domain_Subscriber": {
            data?: components["schemas"]["domain.Subscriber"][];
            pagination?: components["schemas"]["api_admin.PaginationResponse"];
        };
        "api_admin.PaginatedListResponse-domain_Template": {
            data?: components["schemas"]["domain.Template"][];
            pagination?: components["schemas"]["api_admin.PaginationResponse"];
        };
        "api_admin.PaginationResponse": {
            limit?: number;
            page?: number;
            total?: number;
        };
        "api_admin.UpdateCampaignStatusRequest": {
            status?: string;
        };
        "domain.Campaign": {
            bounce_count?: number;
            click_count?: number;
            /** @description Unix timestamp */
            created_at?: number;
            /** @description JSON data for templates */
            data?: {
                [key: string]: unknown;
            };
            /** @description For soft deletes */
            deleted_at?: number;
            delivered_count?: number;
            failed_count?: number;
            /** @description Sender's email */
            from_email?: string;
            /** @description Sender's name */
            from_name?: string;
            /** @description Additional email headers */
            headers?: {
                [key: string]: string;
            };
            /** @description UUID */
            id?: string;
            /** @description Name of the campaign */
            name?: string;
            open_count?: number;
            /** @description Calculated statistics */
            recipient_count?: number;
            /** @description Scheduled time for sending */
            scheduled_at?: number;
            /** @description Time when sending was completed */
            sent_at?: number;
            /** @description Status of the campaign */
            status?: string;
            /** @description Subject template */
            subject?: string;
            /** @description Tags for categorization */
            tags?: string[];
            /** @description HTML template */
            template_html?: string;
            /** @description Optional template ID */
            template_id?: string;
            /** @description Plain text template */
            template_text?: string;
            /** @description Unix timestamp */
            updated_at?: number;
            /** @description UTM parameters for link tracking */
            utm_params?: {
                [key: string]: string;
            };
        };
        "domain.CampaignStatus": string;
        "domain.Delivery": {
            attempts?: number;
            /** @description HTML body */
            body_html?: string;
            /** @description Text body */
            body_text?: string;
            /** @description Number of bounces */
            bounce_count?: number;
            /** @description Campaign ID (nullable for transactional) */
            campaign_id?: string;
            /** @description Number of clicks */
            click_count?: number;
            /** @description Timestamps */
            created_at?: number;
            /** @description Individual data for templates */
            data?: {
                [key: string]: unknown;
            };
            /** @description Recipient's email */
            email?: string;
            /** @description Time of failure */
            failed_at?: number;
            /** @description Reason for failure */
            failure_reason?: string;
            /** @description Individual headers */
            headers?: {
                [key: string]: string;
            };
            /** @description UUID */
            id?: string;
            /** @description SMTP Message ID */
            message_id?: string;
            /** @description Recipient's name */
            name?: string;
            /** @description Statistics */
            open_count?: number;
            /** @description First open time */
            opened_at?: number;
            /** @description Scheduled time */
            scheduled_at?: number;
            send_scheduled_at?: number;
            /** @description Time of sending */
            sent_at?: number;
            status?: components["schemas"]["domain.DeliveryStatus"];
            /** @description Actual sent subject */
            subject?: string;
            /** @description Tags for categorization */
            tags?: string[];
            type?: components["schemas"]["domain.DeliveryType"];
        };
        /** @description scheduled, sending, sent, delivered, failed, bounced */
        "domain.DeliveryStatus": string;
        /** @description campaign, transactional */
        "domain.DeliveryType": string;
        "domain.List": {
            /** @description Unix timestamp in seconds */
            created_at?: number;
            /** @description For soft deletes */
            deleted_at?: number;
            /** @description Description of the list */
            description?: string;
            /** @description UUID */
            id?: string;
            /** @description Name of the list */
            name?: string;
            /** @description Calculated field for subscriber count */
            subscriber_count?: number;
            /** @description Tags for categorization */
            tags?: string[];
            /** @description Unix timestamp in seconds */
            updated_at?: number;
        };
        "domain.Subscriber": {
            /** @description Unix timestamp in seconds */
            created_at?: number;
            /** @description Unique email address */
            email?: string;
            /** @description UUID */
            id?: string;
            lists?: components["schemas"]["domain.SubscriberList"][];
            /** @description Name of the subscriber */
            name?: string;
            status?: string;
            /** @description Unix timestamp in seconds */
            updated_at?: number;
        };
        "domain.SubscriberList": {
            /** @description Unix timestamp in seconds */
            created_at?: number;
            /** @description Foreign key to the List */
            list_id?: string;
            status?: components["schemas"]["domain.SubscriberListStatus"];
            /** @description Unix timestamp of subscription */
            subscribed_at?: number;
            /** @description Unix timestamp of unsubscription */
            unsubscribed_at?: number;
            /** @description Unix timestamp in seconds */
            updated_at?: number;
        };
        "domain.SubscriberListStatus": string;
        "domain.SubscriberStatus": string;
        "domain.Template": {
            /** @description HTML content of the template */
            body_html?: string;
            /** @description BodyMJML holds the MJML source (optional). If provided, MJML will be
             *     compiled to HTML for preview/editing/preview. */
            body_mjml?: string;
            /** @description Text content of the template */
            body_text?: string;
            /** @description Unix timestamp seconds */
            created_at?: number;
            /** @description UUID */
            id?: string;
            /** @description Template name */
            name?: string;
            /** @description Default subject for the template */
            subject?: string;
            /** @description Unix timestamp seconds */
            updated_at?: number;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CampaignStatsResponse": {
            labels?: number[];
            series?: components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.StatsSeries"][];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateCampaignRequest": {
            data?: {
                [key: string]: unknown;
            };
            from_email?: string;
            from_name?: string;
            headers?: {
                [key: string]: string;
            };
            name?: string;
            scheduled_at?: number;
            status?: components["schemas"]["domain.CampaignStatus"];
            subject?: string;
            tags?: string[];
            template_html?: string;
            template_id?: string;
            template_text?: string;
            utm_params?: {
                [key: string]: string;
            };
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesRequest": {
            individuals?: components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.Individual"][];
            lists?: string[];
            /** @description ScheduledAt seconds */
            scheduled_at?: number;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateDeliveriesResponse": {
            deliveries_created?: number;
            scheduled_at?: number;
            status?: string;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateListRequest": {
            description?: string;
            name?: string;
            tags?: string[];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateSubscriberRequest": {
            email?: string;
            name?: string;
            status?: components["schemas"]["domain.SubscriberStatus"];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateSubscribersRequest": {
            append?: boolean;
            subscribers?: components["schemas"]["github_com_headmail_headmail_pkg_api_admin_dto.CreateSubscriberRequest"][];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateTemplateRequest": {
            body_html?: string;
            /** @description BodyMJML allows clients to submit MJML source which can be compiled to HTML later. */
            body_mjml?: string;
            body_text?: string;
            name?: string;
            subject?: string;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.CreateTransactionalDeliveryRequest": {
            data?: {
                [key: string]: unknown;
            };
            email?: string;
            headers?: {
                [key: string]: string;
            };
            name?: string;
            subject?: string;
            tags?: string[];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.Individual": {
            data?: {
                [key: string]: unknown;
            };
            email?: string;
            headers?: {
                [key: string]: string;
            };
            name?: string;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.PatchSubscribersRequest": {
            add?: string[];
            remove?: string[];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.PreviewTemplateRequest": {
            email?: string;
            /** @description Sample subscriber fields used during rendering */
            name?: string;
            subject?: string;
            templateHtml?: string;
            templateText?: string;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.PreviewTemplateResponse": {
            html?: string;
            subject?: string;
            text?: string;
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.ReplaceSubscribersRequest": {
            subscribers?: string[];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.StatsSeries": {
            campaign_id?: string;
            clicks?: number[];
            opens?: number[];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.UpdateCampaignRequest": {
            data?: {
                [key: string]: unknown;
            };
            from_email?: string;
            from_name?: string;
            headers?: {
                [key: string]: string;
            };
            name?: string;
            scheduled_at?: number;
            status?: components["schemas"]["domain.CampaignStatus"];
            subject?: string;
            tags?: string[];
            template_html?: string;
            template_id?: string;
            template_text?: string;
            utm_params?: {
                [key: string]: string;
            };
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.UpdateListRequest": {
            description?: string;
            name?: string;
            tags?: string[];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.UpdateSubscriberRequest": {
            email?: string;
            name?: string;
            status?: components["schemas"]["domain.SubscriberStatus"];
        };
        "github_com_headmail_headmail_pkg_api_admin_dto.UpdateTemplateRequest": {
            body_html?: string;
            /** @description BodyMJML allows clients to submit MJML source which can be compiled to HTML later. */
            body_mjml?: string;
            body_text?: string;
            name?: string;
            subject?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
